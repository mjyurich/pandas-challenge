{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Observations and Insights "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age_months</th>\n",
       "      <th>Weight (g)</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>5</td>\n",
       "      <td>38.825898</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>10</td>\n",
       "      <td>35.014271</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>15</td>\n",
       "      <td>34.223992</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>20</td>\n",
       "      <td>32.997729</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1888</th>\n",
       "      <td>z969</td>\n",
       "      <td>Naftisol</td>\n",
       "      <td>Male</td>\n",
       "      <td>9</td>\n",
       "      <td>30</td>\n",
       "      <td>25</td>\n",
       "      <td>63.145652</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1889</th>\n",
       "      <td>z969</td>\n",
       "      <td>Naftisol</td>\n",
       "      <td>Male</td>\n",
       "      <td>9</td>\n",
       "      <td>30</td>\n",
       "      <td>30</td>\n",
       "      <td>65.841013</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1890</th>\n",
       "      <td>z969</td>\n",
       "      <td>Naftisol</td>\n",
       "      <td>Male</td>\n",
       "      <td>9</td>\n",
       "      <td>30</td>\n",
       "      <td>35</td>\n",
       "      <td>69.176246</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1891</th>\n",
       "      <td>z969</td>\n",
       "      <td>Naftisol</td>\n",
       "      <td>Male</td>\n",
       "      <td>9</td>\n",
       "      <td>30</td>\n",
       "      <td>40</td>\n",
       "      <td>70.314904</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1892</th>\n",
       "      <td>z969</td>\n",
       "      <td>Naftisol</td>\n",
       "      <td>Male</td>\n",
       "      <td>9</td>\n",
       "      <td>30</td>\n",
       "      <td>45</td>\n",
       "      <td>73.867845</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1893 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Mouse ID Drug Regimen   Sex  Age_months  Weight (g)  Timepoint  \\\n",
       "0        k403     Ramicane  Male          21          16          0   \n",
       "1        k403     Ramicane  Male          21          16          5   \n",
       "2        k403     Ramicane  Male          21          16         10   \n",
       "3        k403     Ramicane  Male          21          16         15   \n",
       "4        k403     Ramicane  Male          21          16         20   \n",
       "...       ...          ...   ...         ...         ...        ...   \n",
       "1888     z969     Naftisol  Male           9          30         25   \n",
       "1889     z969     Naftisol  Male           9          30         30   \n",
       "1890     z969     Naftisol  Male           9          30         35   \n",
       "1891     z969     Naftisol  Male           9          30         40   \n",
       "1892     z969     Naftisol  Male           9          30         45   \n",
       "\n",
       "      Tumor Volume (mm3)  Metastatic Sites  \n",
       "0              45.000000                 0  \n",
       "1              38.825898                 0  \n",
       "2              35.014271                 1  \n",
       "3              34.223992                 1  \n",
       "4              32.997729                 1  \n",
       "...                  ...               ...  \n",
       "1888           63.145652                 2  \n",
       "1889           65.841013                 3  \n",
       "1890           69.176246                 4  \n",
       "1891           70.314904                 4  \n",
       "1892           73.867845                 4  \n",
       "\n",
       "[1893 rows x 8 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Dependencies and Setup\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import scipy.stats as st\n",
    "from scipy.stats import linregress\n",
    "import numpy as np\n",
    "\n",
    "# Study data files\n",
    "mouse_metadata_path = \"data/Mouse_metadata.csv\"\n",
    "study_results_path = \"data/Study_results.csv\"\n",
    "\n",
    "# Read the mouse data and the study results\n",
    "mouse_metadata = pd.read_csv(mouse_metadata_path)\n",
    "study_results = pd.read_csv(study_results_path)\n",
    "\n",
    "# Combine the data into a single dataset\n",
    "mouse_study = pd.merge(mouse_metadata, study_results, on=\"Mouse ID\", how=\"outer\")\n",
    "# Display the data table for preview\n",
    "mouse_study"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1893"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking the number of mice.\n",
    "mice_count = mouse_study[\"Mouse ID\"].count()\n",
    "mice_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Timepoint</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>k403</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>k403</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>k403</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>k403</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>k403</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1888</th>\n",
       "      <td>z969</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1889</th>\n",
       "      <td>z969</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1890</th>\n",
       "      <td>z969</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1891</th>\n",
       "      <td>z969</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1892</th>\n",
       "      <td>z969</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1893 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Mouse ID  Timepoint\n",
       "0        k403          0\n",
       "1        k403          5\n",
       "2        k403         10\n",
       "3        k403         15\n",
       "4        k403         20\n",
       "...       ...        ...\n",
       "1888     z969         25\n",
       "1889     z969         30\n",
       "1890     z969         35\n",
       "1891     z969         40\n",
       "1892     z969         45\n",
       "\n",
       "[1893 rows x 2 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Getting the duplicate mice by ID number that shows up for Mouse ID and Timepoint. \n",
    "duplicate_mice = pd.DataFrame(mouse_study, columns=[\"Mouse ID\",\"Timepoint\"])\n",
    "duplicate_mice"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Optional: Get all the data for the duplicate mouse ID. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age_months</th>\n",
       "      <th>Weight (g)</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>s185</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>3</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>x401</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>16</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>m601</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Male</td>\n",
       "      <td>22</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>g791</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>11</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1858</th>\n",
       "      <td>z314</td>\n",
       "      <td>Stelasyn</td>\n",
       "      <td>Female</td>\n",
       "      <td>21</td>\n",
       "      <td>28</td>\n",
       "      <td>0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1860</th>\n",
       "      <td>z435</td>\n",
       "      <td>Propriva</td>\n",
       "      <td>Female</td>\n",
       "      <td>12</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1863</th>\n",
       "      <td>z581</td>\n",
       "      <td>Infubinol</td>\n",
       "      <td>Female</td>\n",
       "      <td>24</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1873</th>\n",
       "      <td>z795</td>\n",
       "      <td>Naftisol</td>\n",
       "      <td>Female</td>\n",
       "      <td>13</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1883</th>\n",
       "      <td>z969</td>\n",
       "      <td>Naftisol</td>\n",
       "      <td>Male</td>\n",
       "      <td>9</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>249 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Mouse ID Drug Regimen     Sex  Age_months  Weight (g)  Timepoint  \\\n",
       "0        k403     Ramicane    Male          21          16          0   \n",
       "10       s185    Capomulin  Female           3          17          0   \n",
       "20       x401    Capomulin  Female          16          15          0   \n",
       "30       m601    Capomulin    Male          22          17          0   \n",
       "40       g791     Ramicane    Male          11          16          0   \n",
       "...       ...          ...     ...         ...         ...        ...   \n",
       "1858     z314     Stelasyn  Female          21          28          0   \n",
       "1860     z435     Propriva  Female          12          26          0   \n",
       "1863     z581    Infubinol  Female          24          25          0   \n",
       "1873     z795     Naftisol  Female          13          29          0   \n",
       "1883     z969     Naftisol    Male           9          30          0   \n",
       "\n",
       "      Tumor Volume (mm3)  Metastatic Sites  \n",
       "0                   45.0                 0  \n",
       "10                  45.0                 0  \n",
       "20                  45.0                 0  \n",
       "30                  45.0                 0  \n",
       "40                  45.0                 0  \n",
       "...                  ...               ...  \n",
       "1858                45.0                 0  \n",
       "1860                45.0                 0  \n",
       "1863                45.0                 0  \n",
       "1873                45.0                 0  \n",
       "1883                45.0                 0  \n",
       "\n",
       "[249 rows x 8 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a clean DataFrame by dropping the duplicate mouse by its ID.\n",
    "clean_mouse_study = mouse_study.drop_duplicates(\"Mouse ID\")\n",
    "clean_mouse_study"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Checking the number of mice in the clean DataFrame.\n",
    "clean_mouse_study[\"Mouse ID\"].count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Summary Statistics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mean</th>\n",
       "      <th>Median</th>\n",
       "      <th>Variance</th>\n",
       "      <th>Standard Deviation</th>\n",
       "      <th>SEM</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Capomulin</th>\n",
       "      <td>40.675741</td>\n",
       "      <td>41.557809</td>\n",
       "      <td>24.947764</td>\n",
       "      <td>4.994774</td>\n",
       "      <td>0.329346</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ceftamin</th>\n",
       "      <td>52.591172</td>\n",
       "      <td>51.776157</td>\n",
       "      <td>39.290177</td>\n",
       "      <td>6.268188</td>\n",
       "      <td>0.469821</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Infubinol</th>\n",
       "      <td>52.884795</td>\n",
       "      <td>51.820584</td>\n",
       "      <td>43.128684</td>\n",
       "      <td>6.567243</td>\n",
       "      <td>0.492236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ketapril</th>\n",
       "      <td>55.235638</td>\n",
       "      <td>53.698743</td>\n",
       "      <td>68.553577</td>\n",
       "      <td>8.279709</td>\n",
       "      <td>0.603860</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Naftisol</th>\n",
       "      <td>54.331565</td>\n",
       "      <td>52.509285</td>\n",
       "      <td>66.173479</td>\n",
       "      <td>8.134708</td>\n",
       "      <td>0.596466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Placebo</th>\n",
       "      <td>54.033581</td>\n",
       "      <td>52.288934</td>\n",
       "      <td>61.168083</td>\n",
       "      <td>7.821003</td>\n",
       "      <td>0.581331</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Propriva</th>\n",
       "      <td>52.322552</td>\n",
       "      <td>50.854632</td>\n",
       "      <td>42.351070</td>\n",
       "      <td>6.507770</td>\n",
       "      <td>0.512884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ramicane</th>\n",
       "      <td>40.216745</td>\n",
       "      <td>40.673236</td>\n",
       "      <td>23.486704</td>\n",
       "      <td>4.846308</td>\n",
       "      <td>0.320955</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Stelasyn</th>\n",
       "      <td>54.233149</td>\n",
       "      <td>52.431737</td>\n",
       "      <td>59.450562</td>\n",
       "      <td>7.710419</td>\n",
       "      <td>0.573111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zoniferol</th>\n",
       "      <td>53.236507</td>\n",
       "      <td>51.818479</td>\n",
       "      <td>48.533355</td>\n",
       "      <td>6.966589</td>\n",
       "      <td>0.516398</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Mean     Median   Variance  Standard Deviation       SEM\n",
       "Drug Regimen                                                               \n",
       "Capomulin     40.675741  41.557809  24.947764            4.994774  0.329346\n",
       "Ceftamin      52.591172  51.776157  39.290177            6.268188  0.469821\n",
       "Infubinol     52.884795  51.820584  43.128684            6.567243  0.492236\n",
       "Ketapril      55.235638  53.698743  68.553577            8.279709  0.603860\n",
       "Naftisol      54.331565  52.509285  66.173479            8.134708  0.596466\n",
       "Placebo       54.033581  52.288934  61.168083            7.821003  0.581331\n",
       "Propriva      52.322552  50.854632  42.351070            6.507770  0.512884\n",
       "Ramicane      40.216745  40.673236  23.486704            4.846308  0.320955\n",
       "Stelasyn      54.233149  52.431737  59.450562            7.710419  0.573111\n",
       "Zoniferol     53.236507  51.818479  48.533355            6.966589  0.516398"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Generate a summary statistics table of mean, median, variance, standard deviation, and SEM of the tumor volume for each regimen\n",
    "\n",
    "# Use groupby and summary statistical methods to calculate the following properties of each drug regimen: \n",
    "summary_stat = mouse_study.groupby(\"Drug Regimen\")\n",
    "\n",
    "# mean, median, variance, standard deviation, and SEM of the tumor volume. \n",
    "mean = summary_stat[\"Tumor Volume (mm3)\"].mean()\n",
    "median = summary_stat[\"Tumor Volume (mm3)\"].median()\n",
    "var = summary_stat[\"Tumor Volume (mm3)\"].var()\n",
    "st_dev = summary_stat[\"Tumor Volume (mm3)\"].std()\n",
    "sem = summary_stat[\"Tumor Volume (mm3)\"].sem()\n",
    "\n",
    "# Assemble the resulting series into a single summary dataframe.\n",
    "summary_stats = pd.DataFrame({\"Mean\": mean,\n",
    "                             \"Median\": median,\n",
    "                             \"Variance\": var,\n",
    "                             \"Standard Deviation\": st_dev,\n",
    "                             \"SEM\": sem})\n",
    "\n",
    "summary_stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Generate a summary statistics table of mean, median, variance, standard deviation, and SEM of the tumor volume for each regimen\n",
    "\n",
    "# Using the aggregation method, produce the same summary statistics in a single line\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bar and Pie Charts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'Total Number of Timepoints per Regimen'}, xlabel='Drug Regimen', ylabel='TimePoint Count'>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a bar plot showing the total number of timepoints for all mice tested for each drug regimen using Pandas.\n",
    "drug_group = mouse_study.groupby(\"Drug Regimen\")\n",
    "drugs_used = pd.DataFrame(drug_group[\"Drug Regimen\"].count())\n",
    "\n",
    "bar_chart = drugs_used.plot(kind=\"bar\", title=\"Total Number of Timepoints per Regimen\", color=\"red\") \n",
    "\n",
    "#Set chart labels\n",
    "bar_chart.set_xlabel(\"Drug Regimen\")\n",
    "bar_chart.set_ylabel(\"TimePoint Count\")\n",
    "\n",
    "bar_chart"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a bar plot showing the total number of timepoints for all mice tested for each drug regimen using pyplot.\n",
    "x_axis = np.arange(len(drugs_used))\n",
    "tick_locations = [value for value in x_axis]\n",
    "\n",
    "#Create bar char, include xticks\n",
    "plt.bar(x_axis, drugs_used[\"Drug Regimen\"], color=\"r\", align=\"center\")\n",
    "plt.xticks(tick_locations, list(drugs_used[\"Drug Regimen\"].index), rotation=\"vertical\")\n",
    "\n",
    "#Set x and Y limits\n",
    "plt.xlim(-0.75, len(x_axis)-0.25)\n",
    "plt.ylim(0, max(drugs_used[\"Drug Regimen\"])+20)\n",
    "\n",
    "#Create title and labels for axis\n",
    "plt.title(\"Total Number of Timepoints Per Regimen\")\n",
    "plt.xlabel(\"Drug Regimen\")\n",
    "plt.ylabel(\"TimePoint Count\")\n",
    "\n",
    "plt.legend([\"Drug Regimen\"], loc=\"best\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'Male vs. Female Mice Used'}, ylabel='Sex'>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a pie plot showing the distribution of female versus male mice using Pandas\n",
    "gender = mouse_study.groupby(\"Sex\")\n",
    "gender_df = pd.DataFrame(gender[\"Sex\"].count())\n",
    "\n",
    "pie_chart = gender_df.plot(kind=\"pie\", y=\"Sex\", title=\"Male vs. Female Mice Used\", autopct=\"%1.1f%%\", startangle=140, shadow=True, legend=False, colors=[\"Red\", \"Blue\"])\n",
    "\n",
    "pie_chart"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a pie plot showing the distribution of female versus male mice using pyplot\n",
    "gender_count = gender_df[\"Sex\"]\n",
    "gender = list(gender_df.index)\n",
    "\n",
    "plt.pie(gender_count, labels=gender, colors=[\"red\", \"blue\"], autopct=\"%1.1f%%\",shadow=True, startangle=140)\n",
    "\n",
    "#Set pie chart title and labels\n",
    "plt.title(\"Male vs. Female Mice Used\")\n",
    "plt.ylabel(\"Sex\")\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Quartiles, Outliers and Boxplots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age_months</th>\n",
       "      <th>Weight (g)</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "      <th>Max TimePoint</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>5</td>\n",
       "      <td>38.825898</td>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>10</td>\n",
       "      <td>35.014271</td>\n",
       "      <td>1</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>15</td>\n",
       "      <td>34.223992</td>\n",
       "      <td>1</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>20</td>\n",
       "      <td>32.997729</td>\n",
       "      <td>1</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1888</th>\n",
       "      <td>z969</td>\n",
       "      <td>Naftisol</td>\n",
       "      <td>Male</td>\n",
       "      <td>9</td>\n",
       "      <td>30</td>\n",
       "      <td>25</td>\n",
       "      <td>63.145652</td>\n",
       "      <td>2</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1889</th>\n",
       "      <td>z969</td>\n",
       "      <td>Naftisol</td>\n",
       "      <td>Male</td>\n",
       "      <td>9</td>\n",
       "      <td>30</td>\n",
       "      <td>30</td>\n",
       "      <td>65.841013</td>\n",
       "      <td>3</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1890</th>\n",
       "      <td>z969</td>\n",
       "      <td>Naftisol</td>\n",
       "      <td>Male</td>\n",
       "      <td>9</td>\n",
       "      <td>30</td>\n",
       "      <td>35</td>\n",
       "      <td>69.176246</td>\n",
       "      <td>4</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1891</th>\n",
       "      <td>z969</td>\n",
       "      <td>Naftisol</td>\n",
       "      <td>Male</td>\n",
       "      <td>9</td>\n",
       "      <td>30</td>\n",
       "      <td>40</td>\n",
       "      <td>70.314904</td>\n",
       "      <td>4</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1892</th>\n",
       "      <td>z969</td>\n",
       "      <td>Naftisol</td>\n",
       "      <td>Male</td>\n",
       "      <td>9</td>\n",
       "      <td>30</td>\n",
       "      <td>45</td>\n",
       "      <td>73.867845</td>\n",
       "      <td>4</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1893 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Mouse ID Drug Regimen   Sex  Age_months  Weight (g)  Timepoint  \\\n",
       "0        k403     Ramicane  Male          21          16          0   \n",
       "1        k403     Ramicane  Male          21          16          5   \n",
       "2        k403     Ramicane  Male          21          16         10   \n",
       "3        k403     Ramicane  Male          21          16         15   \n",
       "4        k403     Ramicane  Male          21          16         20   \n",
       "...       ...          ...   ...         ...         ...        ...   \n",
       "1888     z969     Naftisol  Male           9          30         25   \n",
       "1889     z969     Naftisol  Male           9          30         30   \n",
       "1890     z969     Naftisol  Male           9          30         35   \n",
       "1891     z969     Naftisol  Male           9          30         40   \n",
       "1892     z969     Naftisol  Male           9          30         45   \n",
       "\n",
       "      Tumor Volume (mm3)  Metastatic Sites  Max TimePoint  \n",
       "0              45.000000                 0             45  \n",
       "1              38.825898                 0             45  \n",
       "2              35.014271                 1             45  \n",
       "3              34.223992                 1             45  \n",
       "4              32.997729                 1             45  \n",
       "...                  ...               ...            ...  \n",
       "1888           63.145652                 2             45  \n",
       "1889           65.841013                 3             45  \n",
       "1890           69.176246                 4             45  \n",
       "1891           70.314904                 4             45  \n",
       "1892           73.867845                 4             45  \n",
       "\n",
       "[1893 rows x 9 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate the final tumor volume of each mouse across four of the treatment regimens:  \n",
    "# Capomulin, Ramicane, Infubinol, and Ceftamin\n",
    "\n",
    "# Start by getting the last (greatest) timepoint for each mouse\n",
    "max_tp = mouse_study.groupby(\"Mouse ID\")[\"Timepoint\"].max().sort_values().reset_index()\n",
    "max_tp_df = max_tp.rename(columns={\"Timepoint\": \"Max TimePoint\"})\n",
    "merged_mouse_study = pd.merge(mouse_study, max_tp_df, on=\"Mouse ID\")\n",
    "\n",
    "# Merge this group df with the original dataframe to get the tumor volume at the last timepoint\n",
    "merged_mouse_study"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Capomulin IQR is 7.781863460000004\n",
      "Capomulin Lower Bound is 20.70456164999999\n",
      "Capomulin Upper Bound is 51.83201549\n",
      "Capomulin Outliers are 0\n",
      "Ramicane IQR is 9.098536719999998\n",
      "Ramicane Lower Bound is 17.912664470000003\n",
      "Ramicane Upper Bound is 54.30681135\n",
      "Ramicane Outliers are 0\n",
      "Infubinol IQR is 11.477135160000003\n",
      "Infubinol Lower Bound is 36.83290494999999\n",
      "Infubinol Upper Bound is 82.74144559000001\n",
      "Infubinol Outliers are 1\n",
      "Ceftamin IQR is 15.577752179999997\n",
      "Ceftamin Lower Bound is 25.355449580000002\n",
      "Ceftamin Upper Bound is 87.66645829999999\n",
      "Ceftamin Outliers are 0\n"
     ]
    }
   ],
   "source": [
    "# Put treatments into a list for for loop (and later for plot labels)\n",
    "drugs = [\"Capomulin\", \"Ramicane\", \"Infubinol\", \"Ceftamin\"]\n",
    "\n",
    "# Create empty list to fill with tumor vol data (for plotting)\n",
    "drug_values = []\n",
    "\n",
    "for drug in drugs:\n",
    "    \n",
    "    # Locate the rows which contain mice on each drug and get the tumor volumes\n",
    "    drug_df = merged_mouse_study.loc[merged_mouse_study[\"Drug Regimen\"]==drug]\n",
    "    \n",
    "    # add subset\n",
    "    final_volume = drug_df.loc[drug_df[\"Timepoint\"] == drug_df[\"Max TimePoint\"]]\n",
    "    \n",
    "    volume_values = final_volume[\"Tumor Volume (mm3)\"]\n",
    "    \n",
    "#Append the empty list with Volume Values\n",
    "    drug_values.append(volume_values)\n",
    "\n",
    "# Calculate the IQR and quantitatively determine if there are any potential outliers. \n",
    "    quartiles = volume_values.quantile([.25,.5,.75])\n",
    "    lowerq = quartiles[.25]\n",
    "    upperq = quartiles[.75]\n",
    "    iqr = upperq - lowerq\n",
    "   \n",
    "    # Determine possible outliers using upper and lower bounds\n",
    "    lower_bound = lowerq -(1.5*iqr)\n",
    "    upper_bound = upperq +(1.5*iqr)\n",
    "    \n",
    "    #Find any outliers in the data\n",
    "    possible_outliers = (volume_values.loc[(final_volume[\"Tumor Volume (mm3)\"] >= upper_bound) | (final_volume[\"Tumor Volume (mm3)\"] <= lower_bound)]).count()\n",
    "    \n",
    "    print(f\"{drug} IQR is {iqr}\")\n",
    "    print(f\"{drug} Lower Bound is {lower_bound}\")\n",
    "    print(f\"{drug} Upper Bound is {upper_bound}\")\n",
    "    print(f\"{drug} Outliers are {possible_outliers}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a box plot of the final tumor volume of each mouse across four regimens of interest\n",
    "#Use list containing tumor volumes that was appended in for loop\n",
    "plt.boxplot(drug_values)\n",
    "\n",
    "#Create plot title and labels\n",
    "plt.title(\"Final Tumor Volume by Drug Regimen\")\n",
    "plt.ylabel(\"Final Tumor Volume (mm3)\")\n",
    "plt.xticks([1,2,3,4],[\"Capomulin\", \"Ramicane\", \"Infubinol\", \"Ceftamin\"])\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Line and Scatter Plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a line plot of tumor volume vs. time point for a mouse treated with Capomulin\n",
    "#Determine a mouse that was treated with Capolmulin(x401)\n",
    "mouse = mouse_study.loc[mouse_study[\"Mouse ID\"]== \"x401\"]\n",
    "\n",
    "# Create line plot of Capomulin treatment over time and the Tumor Volume following treatment\n",
    "plt.plot(mouse[\"Timepoint\"], mouse[\"Tumor Volume (mm3)\"], marker=\"o\")\n",
    "\n",
    "#Set title and labels for line plot\n",
    "plt.title(\"Capomulin Treatment of mouse\")\n",
    "plt.xlabel(\"Timepoint\")\n",
    "plt.ylabel(\"Tumor Volume (mm3)\")\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a scatter plot of average tumor volume vs. mouse weight for the Capomulin regimen\n",
    "#Retrieve data of all mice that were treated with Capomulin\n",
    "capomulin = mouse_study.loc[mouse_study[\"Drug Regimen\"] == \"Capomulin\"]\n",
    "\n",
    "# Retrieve all data grouped by Mouse ID and their Tumor Volume\n",
    "cap_group = pd.DataFrame(capomulin.groupby(\"Mouse ID\")[\"Tumor Volume (mm3)\"].mean().sort_values()).reset_index().rename(columns={\"Tumor Volume (mm3)\": \"Average Tumor Volume\"})\n",
    "\n",
    "#Merge above data to find all mice under Capomulin treatment with tumor volume\n",
    "avg_vol = pd.merge(capomulin, cap_group, on=\"Mouse ID\")\n",
    "final_df = avg_vol[[\"Weight (g)\", \"Average Tumor Volume\"]].drop_duplicates()\n",
    "final_df\n",
    "\n",
    "#Create x and y axis for scatter plot\n",
    "x_axis = final_df[\"Weight (g)\"]\n",
    "y_axis = final_df[\"Average Tumor Volume\"]\n",
    "\n",
    "plt.scatter(x_axis, y_axis, marker=\"o\", facecolors=\"red\", edgecolors=\"black\")\n",
    "\n",
    "#Set title and labels\n",
    "plt.title(\"Avg. Tumor Vol. vs. Mouse Weight (Capomulin)\")\n",
    "plt.xlabel(\"Weight(g)\")\n",
    "plt.ylabel(\"Average Tumor Volume(mm3)\")\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Correlation and Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Correlation between Weight(g) and Average Tumor Volume(mm3) is 0.84\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calculate the correlation coefficient and linear regression model \n",
    "# for mouse weight and average tumor volume for the Capomulin regimen\n",
    "x_values = final_df[\"Weight (g)\"]\n",
    "y_values = final_df[\"Average Tumor Volume\"]\n",
    "\n",
    "#Find Line regression values to create line equation\n",
    "(slope, intercept, rvalue, pvalue, stderr) = linregress(x_values,y_values)\n",
    "regress_values = x_values*slope + intercept\n",
    "line_eq = \"y =\" + str(round(slope,2)) + \"x +\" + str(round(intercept, 2))\n",
    "\n",
    "#Find the Correlation Coefficient\n",
    "correlation = st.pearsonr(x_values,y_values)\n",
    "print(f\"The Correlation between Weight(g) and Average Tumor Volume(mm3) is {round(correlation[0],2)}\")\n",
    "\n",
    "#Create Scatter plot again with regression line\n",
    "plt.scatter(x_values,y_values)\n",
    "plt.plot(x_values, regress_values, \"r-\")\n",
    "plt.annotate(line_eq, (21,36), fontsize=\"14\", color=\"red\")\n",
    "\n",
    "#Set title and labels\n",
    "plt.title(\"Avg. Tumor Vol. to Weight (With Regression line)\")\n",
    "plt.xlabel(\"Weight(g)\")\n",
    "plt.ylabel(\"Average Tumor Volume(mm3)\")\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
